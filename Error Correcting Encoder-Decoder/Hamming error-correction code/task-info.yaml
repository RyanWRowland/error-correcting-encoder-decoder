type: edu
custom_name: stage5
files:
- name: src/correcter/Main.java
  visible: true
  text: |
    package correcter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CorrecterTest.java
  visible: false
  text: |+
    import correcter.Main;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.List;

    class TestClue {
        String input;
        String fileContent;

        TestClue(String input, String fileContent) {
            this.input = input;
            this.fileContent = fileContent;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        private static File received = null;
        private static File encoded = null;
        private static File decoded = null;

        public CorrecterTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("encode", "Eat more of these french buns!"),
                new TestClue("send",   "Eat more of these french buns!"),
                new TestClue("decode", "Eat more of these french buns!"),

                new TestClue("encode", "$ome rand0m messAge"),
                new TestClue("send",   "$ome rand0m messAge"),
                new TestClue("decode", "$ome rand0m messAge"),

                new TestClue("encode", "better call Saul 555-00-73!"),
                new TestClue("send",   "better call Saul 555-00-73!"),
                new TestClue("decode", "better call Saul 555-00-73!"),

                new TestClue("encode", "5548172 6548 225147 23656595 5155"),
                new TestClue("send",   "5548172 6548 225147 23656595 5155"),
                new TestClue("decode", "5548172 6548 225147 23656595 5155"),
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input)
                    .addFile("send.txt", testClues[i].fileContent));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String path = System.getProperty("user.dir");

            received = null;
            encoded = null;
            decoded = null;

            searchReceived();
            searchEncoded();
            searchDecoded();

            String correctFileBinary = toBinary(clue.fileContent.getBytes());
            String correctFileEncoded = encodeFile(correctFileBinary);

            String action = clue.input;

            if (action.equals("encode")) {

                if (encoded == null) {
                    return new CheckResult(false,
                        "Can't find encoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] encodedContent;
                FileInputStream encodedStream;

                try {
                    encodedStream = new FileInputStream(encoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    encodedContent = encodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String encodedBinary = toBinary(encodedContent);

                return new CheckResult(encodedBinary.equals(correctFileEncoded));
            }

            if (action.equals("send")) {

                if (received == null) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it " +
                            "down or make sure the name of file is correct.");
                }

                byte[] receivedContent;

                FileInputStream receivedStream;

                try {
                    receivedStream = new FileInputStream(received);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    receivedContent = receivedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String receivedBinary = toBinary(receivedContent);


                return checkDifference(receivedBinary, correctFileEncoded);
            }



            if (action.equals("decode")) {

                if (decoded == null) {
                    return new CheckResult(false,
                        "Can't find decoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] decodedContent;


                FileInputStream decodedStream;

                try {
                    decodedStream = new FileInputStream(decoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    decodedContent = decodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String decodedBinary = toBinary(decodedContent);

                if (!decodedBinary.equals(correctFileBinary)) {
                    return new CheckResult(false, "The decoded text must match initial text!");
                }

                return CheckResult.correct();
            }

            throw new RuntimeException("Can't check the program");
        }

        private static String toBinary(byte[] bytes) {
            StringBuilder sb = new StringBuilder(bytes.length * Byte.SIZE);
            for (int i = 0; i < Byte.SIZE * bytes.length; i++) {
                sb.append((bytes[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
            }
            return sb.toString();
        }

        private static byte[] fromBinary(String s) {
            int sLen = s.length();
            byte[] toReturn = new byte[(sLen + Byte.SIZE - 1) / Byte.SIZE];
            char c;
            for (int i = 0; i < sLen; i++)
                if ((c = s.charAt(i)) == '1')
                    toReturn[i / Byte.SIZE] = (byte) (toReturn[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));
                else if (c != '0')
                    throw new IllegalArgumentException();
            return toReturn;
        }

        private static void searchReceived() {
            File file = new File("received.txt");
            if (file.exists()) {
                received = file;
            }
        }

        private static void searchEncoded() {
            File file = new File("encoded.txt");
            if (file.exists()) {
                encoded = file;
            }
        }

        private static void searchDecoded() {
            File file = new File("decoded.txt");
            if (file.exists()) {
                decoded = file;
            }
        }

        private String encodeFile(String binaryString) {

            String encoded = "";

            for (int i = 0; i < binaryString.length(); i += 4) {

                if (i + 4 > binaryString.length()) {
                    throw new RuntimeException("Can't decode binary data");
                }

                int startSubIndex = i;
                int stopSubIndex = i + 4;

                String currSub = binaryString.substring(startSubIndex, stopSubIndex);

                String encodedPart;

                int parityBit1 = 0;
                int parityBit2 = 0;
                int parityBit4 = 0;

                if (currSub.charAt(0) == '1') {
                    parityBit1++;
                    parityBit2++;
                }

                if (currSub.charAt(1) == '1') {
                    parityBit1++;
                    parityBit4++;
                }

                if (currSub.charAt(2) == '1') {
                    parityBit2++;
                    parityBit4++;
                }

                if (currSub.charAt(3) == '1') {
                    parityBit1++;
                    parityBit2++;
                    parityBit4++;
                }

                encodedPart =
                    (parityBit1 % 2 == 1? "1": "0") +
                    (parityBit2 % 2 == 1? "1": "0") +
                    currSub.charAt(0) +
                    (parityBit4 % 2 == 1? "1": "0") +
                    currSub.charAt(1) +
                    currSub.charAt(2) +
                    currSub.charAt(3) +
                    "0";

                encoded += encodedPart;
            }

            return encoded;
        }

        private CheckResult checkDifference(String output, String correct) {
            if (output.isEmpty() && correct.isEmpty()) return CheckResult.correct();

            if (output.length() != correct.length()) {
                return new CheckResult(false,
                    "The program was expected to output " +
                        correct.length() / 8 +
                        " bytes, but output " +
                        output.length() / 8);
            }

            for (int i = 0; i < output.length(); i += 8) {
                String currOutputByte = output.substring(i, i+8);
                String currCorrectByte = correct.substring(i, i+8);

                int difference = 0;
                for (int j = 0; j < currCorrectByte.length(); j++) {
                    char currOutputBit = currOutputByte.charAt(j);
                    char currCorrectBit = currCorrectByte.charAt(j);

                    if (currCorrectBit != currOutputBit) {
                        difference++;
                    }
                }

                if (difference == 0) {
                    return new CheckResult(false,
                        "One of bytes from the input stayed the same but should be changed");
                }

                if (difference != 1) {
                    return new CheckResult(false,
                        "One of bytes from the input was changes in more than one bit");
                }
            }

            return CheckResult.correct();
        }
    }

  learner_created: false
- name: src/correcter/EncoderDecoder.java
  visible: true
  text: |
    package correcter;

    import java.io.*;
    import java.util.Random;

    public class EncoderDecoder {

        public static void send(String inputFileName, String outputFileName) {
            try (FileInputStream inputStream = new FileInputStream(inputFileName)) {
                try (FileOutputStream outputStream = new FileOutputStream(outputFileName)) {
                    int byteFromFile = inputStream.read();
                    while (byteFromFile != -1) {
                        byteFromFile ^= 1 << 2; // introduce error
                        outputStream.write(byteFromFile);
                        byteFromFile = inputStream.read();
                    }
                    inputStream.close();
                } catch (IOException e) {
                    System.out.printf("An exception occurred: %s\n", e.getMessage());
                }
            } catch (IOException e) {
                System.out.printf("No file found.\n Make sure %s exists.\n", inputFileName);
            }
        }

        public static void encode(String inputFileName, String outputFileName) {
            try (FileInputStream inputStream = new FileInputStream(inputFileName)) {
                StringBuilder fileInBinary = new StringBuilder();
                int byteFromFile = inputStream.read();

                // read all bits into a string
                while (byteFromFile != -1) {
                    String binaryString = Integer.toBinaryString(byteFromFile);
                    if (binaryString.length() < 8) {
                        binaryString = "0".repeat(8 - binaryString.length()) + binaryString;
                    }
                    fileInBinary.append(binaryString);
                    byteFromFile = inputStream.read();
                }

                // duplicate bits and add parity into new string
                char[] bitsFromFile = fileInBinary.toString().toCharArray();
                StringBuilder encodedFileInBinary = new StringBuilder();
                int index = 0;
                int bitCounter = 1;
                int parity = 0;
                while (true) {
                    int nextParityPart = index < bitsFromFile.length ? bitsFromFile[index] : 0;
                    if (bitCounter == 1) {
                        parity = nextParityPart;
                    } else {
                        parity ^= nextParityPart;
                    }

                    if (index < bitsFromFile.length) {
                        encodedFileInBinary.append(bitsFromFile[index]);
                        encodedFileInBinary.append(bitsFromFile[index]);
                        index++;
                    } else {
                        encodedFileInBinary.append(0);
                        encodedFileInBinary.append(0);
                    }
                    bitCounter++;

                    if (bitCounter > 3) { // every 3 bits add parity bits
                        encodedFileInBinary.append(Math.abs(Character.getNumericValue(parity)));
                        encodedFileInBinary.append(Math.abs(Character.getNumericValue(parity)));
                        bitCounter = 1;
                    }

                    if (bitCounter == 1 && index >= bitsFromFile.length) {
                        break;
                    }
                }
                inputStream.close();

                System.out.println(fileInBinary.toString());
                System.out.println(encodedFileInBinary.toString());

                try (FileOutputStream outputStream = new FileOutputStream(outputFileName)) {
                    for (int i = 0; i < encodedFileInBinary.length(); i += 8) {
                        String binaryString = encodedFileInBinary.substring(i, i + 8);
                        outputStream.write(Integer.parseInt(binaryString, 2));
                    }
                } catch (IOException e) {
                    System.out.printf("An exception occurred: %s\n", e.getMessage());
                }
            } catch (IOException e) {
                System.out.printf("No file found.\n Make sure %s exists.\n", inputFileName);
            }
        }

        public static void decode(String inputFileName, String outputFileName) {
            try (FileInputStream inputStream = new FileInputStream(inputFileName)) {
                StringBuilder decodedFileInBinary = new StringBuilder();
                int byteFromFile = inputStream.read();
                while (byteFromFile != -1) {
                    String binaryString = Integer.toBinaryString(byteFromFile);
                    if (binaryString.length() < 8) {
                        binaryString = "0".repeat(8 - binaryString.length()) + binaryString;
                    }
                    System.out.print(binaryString);
                    decodedFileInBinary.append(getBits(binaryString));
                    byteFromFile = inputStream.read();
                }
                System.out.println();
                System.out.println(decodedFileInBinary.toString());
                inputStream.close();

                decodedFileInBinary.setLength(decodedFileInBinary.length() - decodedFileInBinary.length() % 8);

                try (FileOutputStream outputStream = new FileOutputStream(outputFileName)) {
                    for (int i = 0; i < decodedFileInBinary.length(); i += 8) {
                        if (i + 8 < decodedFileInBinary.length()) {
                            String binaryString = decodedFileInBinary.substring(i, i + 8);
                            outputStream.write(Integer.parseInt(binaryString, 2));
                        } else {
                            String binaryString = decodedFileInBinary.substring(i);
                            outputStream.write(Integer.parseInt(binaryString, 2));
                        }
                    }
                } catch (IOException e) {
                    System.out.printf("An exception occurred: %s\n", e.getMessage());
                }
            } catch (IOException e) {
                System.out.printf("No file found.\n Make sure %s exists.\n", inputFileName);
            }
        }

        private static String getBits(String byteInBinary) {
            String parityString = byteInBinary.substring(6);
            int parityBit;
            // find parity bit, if parity bit has error, return all bits
            if (parityString.equals("11")) {
                parityBit = 1;
            } else if (parityString.equals("00")) {
                parityBit = 0;
            } else {
                return String.format("%c%c%c", byteInBinary.charAt(0), byteInBinary.charAt(2), byteInBinary.charAt(4));
            }

            StringBuilder bitString = new StringBuilder();
            int errorPosition = 0;
            for (int i = 0; i < 6; i += 2) {
                String pair = byteInBinary.substring(i, i + 2);
                if (pair.equals("11")) {
                    bitString.append(1);
                    parityBit ^= 1;
                } else if (pair.equals("00")) {
                    bitString.append(0);
                    parityBit ^= 0;
                } else {
                    errorPosition = i / 2;
                }
            }
            bitString.insert(errorPosition, parityBit);
            return bitString.toString();
        }

        public static String send(String input) {
            StringBuilder errorInput = new StringBuilder();
            for (int i = 0; i < input.length(); i += 3) {
                errorInput.append(introduceError(input.substring(i, Math.min(i + 3, input.length()))));
            }
            return errorInput.toString();
        }

        private static String introduceError(String subString) {
            StringBuilder errorSubString = new StringBuilder(subString);
            Random random = new Random();
            // generate random number 0 - subString.length, this is the index to get an error
            int errorIndex = random.nextInt(subString.length());
            // generate random number 32 - 126, this is the error symbol that will replace the original symbol
            char errorSymbol;
            do {
                errorSymbol = (char) (random.nextInt(126 - 32 + 1) + 32);
            } while (errorSymbol == subString.charAt(errorIndex));
            errorSubString.setCharAt(errorIndex, errorSymbol);
            return errorSubString.toString();
        }

        public static String encode(String input) {
            StringBuilder encodedInput = new StringBuilder();

            for (char symbol : input.toCharArray()) {
                for (int i = 0; i < 3; i++) {
                    encodedInput.append(symbol);
                }
            }

            return encodedInput.toString();
        }

        public static String decode(String input) {
            if (input.length() % 3 != 0) {
                return "Input not encoded.";
            }

            char[] inputArray = input.toCharArray();
            StringBuilder decodedInput = new StringBuilder();
            // every 3 symbols, get the common occurrence
            for (int i = 0; i < inputArray.length; i += 3) {
                if (inputArray[i] == inputArray[i + 1] || inputArray[i] == inputArray[i + 2]) {
                    decodedInput.append(inputArray[i]);
                } else {
                    decodedInput.append(inputArray[i + 1]);
                }
            }

            return decodedInput.toString();
        }
    }
  learner_created: true
- name: decoded.txt
  visible: true
  text: 5548172 6548 225147 23656595 5155
  learner_created: true
- name: encoded.txt
  visible: true
  text: "\x0f�3<3���\x0f�\0<\0���\x0f��3\0\0��\x0f�3<3\0�\0\x0f\0\0<\x0f\0�3\x0f�\
    3<\0���\x0f��3\0\0�3\x0f��<<\0��\x0f��<3��\x0f\x0f�33\0\0��\x0f�3<3���"
  learner_created: true
- name: received.txt
  visible: true
  text: "\v�787���\v�\x048\x04���\v��7\x04\x04��\v�787\x04�\x04\v\x04\x048\v\x04�\
    7\v�78\x04���\v��7\x04\x04�7\v��88\x04��\v��87��\v\v�77\x04\x04��\v�787���"
  learner_created: true
- name: src/correcter/HammingCode.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/58/stages/316/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/58/stages/316/implement">JetBrains
    Academy</a>
  time: Thu, 24 Dec 2020 18:11:01 UTC
record: -1
